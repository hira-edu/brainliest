You are a senior software architect and code review specialist. My project is a modern web application (React/Next.js, Node/Express, etc.) with growing complexity. I want you to review and reorganize my codebase for maximum maintainability, scalability, and industry compliance, without changing any business logic or UI/UX.

Your Tasks:
Codebase Segregation & Folder Structure:

Analyze my current codebase (components, pages, utilities, assets, public files, CSS, etc.).

Propose and apply an elite-level, industry-standard project structure.

Clearly separate:

components (reusable UI)

pages (route-based components)

hooks (custom React hooks)

contexts (global state management)

utils or lib (utility/helper functions)

services (API calls, authentication logic)

public (images, favicon, fonts, robots.txt, etc.)

styles (global CSS/SCSS files, variables, theme)

types (TypeScript types/interfaces)

config (environment configs, constants)

tests (unit/integration/e2e tests)

CSS/Styling Best Practices:

Move all global and component-specific CSS/SCSS to a public/styles or styles folder.

Ensure all styling is imported via CSS modules, SCSS, or styled-components—no inline styles unless dynamic.

Apply naming conventions for CSS classes (BEM, camelCase, etc.).

Remove any unused styles and deduplicate where possible.

Organize theme variables and mixins in separate files (e.g., variables.scss, mixins.scss).

Code Quality and Review:

Review every file line by line for:

Unused imports or variables

Repeated code blocks (suggest DRY refactors)

Components that should be split or abstracted

Error-prone logic or deprecated APIs

Consistent formatting and linting (suggest Prettier/ESLint config)

Proper file and function naming conventions

Accessibility improvements (aria labels, semantic HTML)

Document all major changes in a migration/organization report.

Assets & Static Files:

Move all static images, SVGs, and fonts to the public folder, referencing them via public paths.

Ensure all asset imports use relative paths or static asset serving best practices.

Configuration and Environment:

Move all config variables to .env files and config/ folder as appropriate.

Remove hard-coded API URLs and secrets from code—use environment variables.

Testing:

Organize existing tests into a tests/ folder.

Recommend and scaffold missing tests (unit, integration, E2E) for key logic and components.

Documentation:

Generate or update a README.md with instructions for running, building, and contributing.

Document project structure and best practices for future contributors.

Final Output:

Deliver a detailed summary of changes made and why.

Provide a clean, scalable, best-practices-compliant project structure, ready for enterprise development.