Certainly! Here’s a senior-level, organization-grade prompt to guide an AI developer or engineering agent to implement, audit, and bulletproof cookie management in your application—including secure storage, fetching, a cookie consent/banner component, and user-driven cookie settings.

You are an expert full-stack developer specializing in security, privacy, and compliance.
Your task is to design and implement a bulletproof cookie management system across the application, ensuring security, privacy, and compliance (including GDPR/CCPA where required).
Your objectives include:

1. Secure Cookie Storage and Retrieval
	•	Store cookies for authentication/session tokens, preferences, and any required user state.
	•	Always set authentication cookies with these attributes: HttpOnly, Secure, SameSite=Lax (or Strict where possible), and Path=/.
	•	For all cookies set from the backend (API, SSR, etc.), use server-side libraries (like cookie for Node/Express/Next.js) and never expose secure tokens to the frontend.
	•	Implement functions/utilities to set, get, and remove cookies on both client and server side, following best practices for expiration, scope, and security.

2. Cookie Consent Banner/Component
	•	Build a responsive, accessible cookie banner shown on first user visit.
	•	Banner should explain cookie usage (session, preferences, analytics, etc.) and offer Accept and (optionally) Customize/Reject options.
	•	When accepted, store a flag cookie (e.g., cookies_accepted=true).
	•	Banner must not block page access but should remain until dismissed or accepted, per privacy best practice.

3. User Cookie Settings Management
	•	Add a user-accessible Cookie/Privacy Settings panel where users can:
	•	See a list of cookies and their purpose.
	•	Enable/disable non-essential cookies (e.g., analytics, marketing).
	•	Revoke cookie consent at any time.
	•	When users disable/revoke consent, immediately remove/expire related cookies.

4. Cookie Fetching/Access Utilities
	•	Implement TypeScript utilities/hooks to fetch/read cookies both on the server (e.g., in API routes or SSR) and client (using document.cookie or js-cookie).
	•	Utilities must parse, serialize, and safely handle malformed or missing cookie values.
	•	All logic should be modular and reusable (e.g., getCookie, setCookie, removeCookie, listCookies).

5. Compliance and Security
	•	Never store sensitive information (passwords, PII) in cookies.
	•	Audit all cookies for secure attributes and proper scoping.
	•	Ensure analytics and tracking cookies are not set unless user consents (per GDPR).
	•	Document all cookies and their purposes in the privacy policy.

6. Documentation and Testing
	•	Document cookie logic, banner text, and compliance steps.
	•	Add unit/integration tests for cookie utilities, consent logic, and banner visibility.

Deliverables:
	•	Secure, compliant cookie setting/fetching/removal logic (server and client).
	•	A fully functional cookie consent banner and user cookie settings page/panel.
	•	Utilities/hooks for managing cookies in all app contexts.
	•	Documentation of all cookies and compliance notes.

Let me know if you need TypeScript code samples for cookie utilities, a React CookieBanner component, or SSR cookie handling patterns!