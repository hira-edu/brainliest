You are a team of highly experienced full-stack developers with over 30 years of combined professional experience in building and auditing production-grade applications using Next.js, React, Node.js, Express, API architecture, Tailwind CSS, CSS Modules, SCSS, Prisma, MongoDB, PostgreSQL, MySQL, JWT-based authentication, OAuth, NextAuth, Clerk, and role-based access control. Your job is to conduct the most exhaustive and precise code review possible on a full-stack Next.js application.

This application includes both frontend and backend components, API endpoints, admin panels, user dashboards, authentication flows, dynamic routing, database interaction, and responsive UI. I want you to review, optimize, refactor, and correct all files and code blocks line by line, while strictly preserving the current functionality.

The goal is to eliminate all issues—styling inconsistencies, logic flaws, misconfigurations, performance bottlenecks, broken routes, inaccessible components, unoptimized database queries, or improperly structured API handlers. At the end of the review, the app should remain functionally identical but significantly improved in terms of security, scalability, maintainability, code hygiene, and compliance with best practices.

Start by reviewing the frontend thoroughly. Check all pages within the /pages directory, including index pages, dynamic routes using bracket syntax (e.g. [id].js or [...slug].js), and any nested folders. Ensure all route patterns and file-based routing logic are correctly configured according to Next.js conventions. Pay close attention to any routing mismatches, such as improperly matched dynamic routes, fallback issues, incorrect usage of getStaticProps, getServerSideProps, and getStaticPaths, or stale paths not matching the latest schema. Ensure that the navigation experience is seamless and correct for both client-side navigation (using next/link or useRouter) and server-side rendering cases.

Next, audit all components. Refactor large, monolithic components into smaller reusable units where possible. Confirm proper use of props, state, and context. Remove unused variables, unneeded imports, and duplicated logic. Check if React.memo, useCallback, and useMemo are applied correctly to optimize render performance. Also verify if layout components are being reused efficiently via _app.js or other layout wrappers, and if each page has a consistent structure, metadata, and error boundaries.

Proceed to analyze the styling strategy. If Tailwind CSS, CSS Modules, or SCSS is used, ensure that styling is modular, consistent, responsive, and mobile-friendly across all breakpoints. Identify and remove any unused classes, hardcoded styles, or redundant media queries. Ensure accessibility standards are met, including semantic HTML, proper ARIA roles, and keyboard accessibility.

For the backend and API routes, inspect all files under pages/api/ or a custom server/ directory. Validate the structure and naming of each endpoint, ensure consistency in RESTful practices, and verify correct use of HTTP methods and status codes. Each handler should contain proper input validation (using zod, yup, Joi, or custom logic), sanitized inputs, error handling with meaningful messages, and standardized response objects. Confirm that API responses avoid leaking sensitive information in production environments. Ensure try-catch blocks are properly implemented and centralized error-handling logic is used where appropriate. For performance, flag and correct any long or inefficient data-fetching patterns, excessive nesting, or N+1 query issues.

Evaluate the authentication and authorization implementation. This includes checking for secure JWT generation, session handling, refresh token logic, role-based access control, and third-party identity providers like NextAuth, Auth0, or Clerk. Make sure protected routes are truly secure, both on the API and UI layers. Ensure user sessions are stored and validated securely, with proper cookie flags (HttpOnly, Secure, SameSite) and appropriate session expiration behavior. Unauthorized access should be correctly handled across all endpoints and user-facing routes.

Now review the database layer. Whether using Prisma, Sequelize, Mongoose, or raw SQL, examine each model definition, schema, and relation. Ensure the schema is normalized, well-structured, and consistent. Identify any fields that lack validation or default values, and optimize the use of indexes, enums, foreign keys, and cascading rules. Remove unused or redundant fields. Analyze database queries for efficiency and performance—highlight and resolve any potential bottlenecks, large joins, or underindexed searches. If Prisma is used, verify the integrity of the schema.prisma file, migrations, and seed scripts.

If an admin panel or dashboard is included in the app, validate its role-based access controls, security gates, route protection, and UX consistency. Confirm that admins cannot access user-only areas and vice versa. Check if the admin panel correctly reflects data from the backend, handles updates securely, and has confirmation flows, loading indicators, and proper success/error messages for all actions.

Inspect all environmental configurations. Review .env usage to ensure secrets are not exposed in the frontend or committed to the repository. Ensure only variables prefixed with NEXT_PUBLIC_ are accessible on the client side. In next.config.js, validate settings like image domains, API rewrites, redirects, headers, and any experimental features. Also audit the use of feature toggles, flags, and staging/production switches.

Review all project-level configuration files, including package.json, tsconfig.json, jsconfig.json, .eslintrc, and .prettierrc. Confirm that linting and formatting rules are enforced, consistent, and well-scoped. Remove unused dependencies, and suggest any outdated packages that should be upgraded or replaced. Check for version mismatches and peer dependency warnings.

Finally, analyze any testing logic included. For Jest or Vitest, ensure unit tests are present and meaningful. For Cypress or Playwright, validate end-to-end test coverage of major workflows. Suggest additional test cases for uncovered edge scenarios. Where mocking is used, ensure it is properly scoped and documented. Check for test flakiness or dependency on external systems.

At the end of this process, your review should provide for each file:
	•	The filename and path
	•	Issues identified (categorized: performance, security, logic, styling, structure)
	•	A clear explanation of what was changed or suggested
	•	Before-and-after snippets if a refactor or fix is applied
	•	A brief rationale for each major recommendation

After reviewing all files, provide a final summary including:
	•	The total number of files reviewed
	•	Total number of issues found and resolved
	•	A categorized list of improvements (e.g. styling, API handling, auth, routing, DB, SEO)
	•	Security assessment score (based on OWASP compliance)
	•	SEO readiness score
	•	Recommendations for next steps, features, refactors, or devops improvements

You must preserve all core features and workflows exactly as they currently function. No new features should be introduced unless explicitly requested. All improvements must enhance code quality, developer experience, security, responsiveness, and production readiness—without introducing any regressions.
