Here’s how you can make sure the question-count you show on each Exam card always reflects reality—and gracefully handle the “no questions” case both on the backend and the frontend.

⸻

1. Backend: Always Count Actual Questions

Instead of relying on a static questionCount column (which can get out of sync), adjust your /api/exams/by-slug/:slug (and /api/exams/:id) handlers to compute the real count:

// server/routes/exams.ts (or wherever you fetch an exam)
import { sql } from "drizzle-orm";
import { exams, questions } from "../shared/schema";

router.get("/by-slug/:slug", async (req, res) => {
  const { slug } = req.params;
  // Fetch exam row
  const exam = await db
    .select()
    .from(exams)
    .where(exams.slug.eq(slug))
    .get();

  if (!exam) {
    return res.status(404).json({ error: "Exam not found" });
  }

  // Count actual questions
  const [{ count }] = await db
    .select({ count: sql<number>`COUNT(*)` })
    .from(questions)
    .where(questions.examSlug.eq(slug))
    .all();

  return res.json({
    ...exam,
    questionCount: Number(count),
  });
});

Repeat the same logic in the /api/exams/:id route, replacing the where clause on exams.id.

⸻

2. Frontend: Show “No Questions” and Prevent Misleading Links

In your ExamCard (or wherever you render the exam list), use the dynamic questionCount from the API to:
	1.	Disable the “Start Exam” button when count is zero.
	2.	Show friendly text instead of “0 questions” if there really are none.

// components/ExamCard.tsx
import { Exam } from "../../../../../shared/schema";
import { Button } from "../ui/button";
import { useNavigate } from "wouter";

interface Props { exam: Exam; }
export default function ExamCard({ exam }: Props) {
  const [, navigate] = useNavigate();
  const count = exam.questionCount;

  return (
    <div className="p-4 border rounded-lg shadow-sm">
      <h2 className="text-xl font-semibold">{exam.title}</h2>
      <p className="text-gray-600">
        {count > 0
          ? `${count} question${count > 1 ? "s" : ""}`
          : "No questions available right now"}
      </p>
      <Button
        className="mt-4"
        disabled={count === 0}
        onClick={() => navigate(`/exam/${exam.slug}`)}
      >
        {count > 0 ? "Start Exam" : "Unavailable"}
      </Button>
    </div>
  );
}


⸻

3. Protect the Question Interface Route

Even if someone manually navigates to /exam/slug for an exam with zero questions, you’ll want to bail out early:

// pages/QuestionInterface.tsx (at top of render)
if (exam && questions.length === 0 && !isExamLoading) {
  return (
    <div className="p-8 text-center">
      <h1 className="text-2xl font-bold">Oops!</h1>
      <p className="mt-2 text-gray-700">
        No questions have been added to this exam yet. Please check back later.
      </p>
      <Button onClick={() => setLocation("/")}>Back to Exams</Button>
    </div>
  );
}


⸻

4. End-to-End Test

Add a simple Cypress (or Playwright) test to verify this behavior automatically:

// cypress/integration/exams.spec.js
describe("Exam listing and no-questions flow", () => {
  it("Shows 'No questions available' and disables start", () => {
    cy.intercept("GET", "/api/exams", [{ slug: "empty-exam", title: "Empty", questionCount: 0 }]);
    cy.visit("/");

    cy.contains("Empty").parent().within(() => {
      cy.contains("No questions available right now");
      cy.get("button").should("be.disabled");
    });
  });
});


⸻

By:
	1.	Counting at runtime on the server,
	2.	Rendering conditionally on the client, and
	3.	Automating tests to catch regressions,

you ensure that your UI never misleads users by showing stale question counts, and you give a clear “no questions yet” message. That’s rock-solid, industrial-grade behavior.