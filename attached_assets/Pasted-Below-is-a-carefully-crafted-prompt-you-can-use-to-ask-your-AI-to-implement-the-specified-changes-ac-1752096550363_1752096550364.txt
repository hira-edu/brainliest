Below is a carefully crafted prompt you can use to ask your AI to implement the specified changes across site-wide files for your Vercel-deployed Vite-based project with a Neon database. The prompt is designed to be clear, detailed, and aligned with the context of our ongoing audit, ensuring the AI understands the project structure, constraints, and desired modifications. It incorporates the specific changes you mentioned ("use client" for RSC, BaseIcon for bundle size reduction, and API route setup) while adhering to the guidelines you've provided.

---

### Prompt

You are Grok 3, built by xAI, tasked with implementing changes across site-wide files for a Vite-based project deploying to Vercel with a Neon database. The project includes a frontend (React components like `AllSubjects.tsx`, `UnifiedAuthModal.tsx`) and a backend (Express server in `server.ts`, routes in `routes.ts`, storage in `storage.ts`, and database configuration in `db.ts`), with dependencies managed in `package.json` and TypeScript configuration in `tsconfig.json`. The codebase has been audited, and all navigation logic must use slug-based routing for subjects, exams, and categories (e.g., `/subjects/slug/:slug`), except for question cards, which must maintain ID-based routing (e.g., `/questions/id/:id`). Do not create new models or alter core functionalities beyond the requested changes.

**Requested Changes:**
1. **Add "use client" for RSC (React Server Components):**
   - Add the `"use client"` directive at the top of all React component files (e.g., `client/src/components/AllSubjects.tsx`, `client/src/components/UnifiedAuthModal.tsx`) to enable client-side rendering where necessary, ensuring compatibility with React Server Components (RSC) in Vercel. Only apply this to files that benefit from client-side interactivity (e.g., forms, modals) and avoid adding it to static or server-rendered components unless interactivity is required.

2. **Use BaseIcon to Reduce Bundle Size:**
   - Replace inline SVG icons or multiple icon imports with a `BaseIcon` component (assumed to be a reusable icon component, e.g., in `client/src/components/BaseIcon.tsx`) across all relevant files (e.g., `AllSubjects.tsx`, `routes.ts` for icon fields in APIs). Ensure `BaseIcon` accepts props like `name`, `size`, and `color` to dynamically render icons (e.g., from `lucide-react` or a custom icon set). Update imports and usages to minimize bundle size, referencing the `package.json` dependency `lucide-react` (`^0.453.0`).

3. **Note API Route Setup:**
   - Document the setup of API routes in `server.ts` and `routes.ts` by adding comments indicating the structure and purpose of each major route group (e.g., `/api/auth`, `/api/admin`, `/api/subjects`). Ensure comments reflect the slug-based routing for subjects/exams/categories and ID-based routing for question cards, aligning with the project’s navigation logic. Do not modify the route implementations, only add documentation.

**Guidelines:**
- Apply changes across all relevant files (e.g., `client/src/components/*.tsx`, `server/*.ts`, `src/*.ts`) based on the project structure defined in `tsconfig.json` (`paths`, `include`).
- Use the latest audited versions of files (e.g., `server.ts`, `routes.ts`, `storage.ts`, `db.ts`, `vite.ts`, `package.json`, `tsconfig.json`) as the baseline.
- Ensure compatibility with Vercel’s serverless environment, avoiding persistent server logic (e.g., `server.listen`) and using `export default app` for handlers.
- Maintain TypeScript type safety as per `tsconfig.json` (`strict: true`).
- Do not nest `<xaiArtifact/>` tags or mention them outside the requested content; wrap any generated code/artifacts in `<xaiArtifact/>` tags with appropriate `artifact_id`, `title`, and `contentType` attributes.
- If a change requires updating multiple files, coordinate the modifications (e.g., updating `storage.ts` and `routes.ts` together for slug-based routing).
- Assume all chats are saved to memory; if the user wants to forget a chat, instruct them to click the book icon beneath the message referencing the chat and select it from the menu, or disable memory in the "Data Controls" section of settings.
- If an image generation is implied, ask for confirmation instead of generating one.
- Do not confirm memory modifications or edits.

**Additional Context:**
- The project uses Vite (`^5.4.19`), React (`^18.3.1`), Drizzle ORM (`^0.40.0`), and `@neondatabase/serverless` (`^0.12.0`), as per `package.json`.
- Environment variables are accessed via `import.meta.env.VITE_*` (e.g., `VITE_DATABASE_URL`, `VITE_NODE_ENV`).
- The Neon database requires `ssl: true` in `db.ts`, and indexes (e.g., `subjects(slug)`, `questions(id)`) are recommended.
- Ensure changes align with the latest audits, removing ID-based navigation for non-question entities and preserving `/questions/id/:id`.

**Action Requested:**
Implement the specified changes across site-wide files, providing the updated code snippets for each affected file. Include comments to document API route setups and ensure all modifications are tested for Vercel compatibility. Return the results as updated file contents or diffs, wrapped in `<xaiArtifact/>` tags where applicable, and provide instructions for applying the changes manually if direct editing is restricted.

---

### Instructions for Use
- Copy this prompt into your AI interface.
- If your AI supports file uploads or context sharing, attach the latest versions of audited files (e.g., `server.ts`, `routes.ts`, `storage.ts`) to provide full context.
- After receiving the AI’s response, review the suggested changes, apply them manually to the respective files, and test the application (e.g., `npm run dev`, Vercel deployment).
- If the AI struggles or the error persists, share the error message and the AI’s output with me for further assistance.

This prompt should guide your AI to implement the changes effectively, leveraging the audit insights while respecting its limitations. Let me know if you encounter issues or need help applying the results!