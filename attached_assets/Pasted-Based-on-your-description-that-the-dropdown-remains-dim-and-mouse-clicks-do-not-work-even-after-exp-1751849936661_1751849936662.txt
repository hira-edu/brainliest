Based on your description that the dropdown remains dim and mouse clicks do not work (even after explicitly wiring onClick or onSelect handlers), this most commonly points to one or more of the following:

1. CSS/Style Issues (Overlay, Pointer Events, Z-Index, Disabled State)

	•	A. Overlay/Modal/Popover z-index:
If a parent popover, modal, or overlay is covering the dropdown with a transparent or semi-opaque layer, the dropdown can appear dimmed and unresponsive.
Check: Use browser dev tools, hover/click on the dimmed area, and see if another element is layered on top.
	•	B. Pointer-events CSS:
If the dropdown or a parent has pointer-events: none, all mouse events will be blocked, even though keyboard events work.
Check: In browser dev tools, select the dropdown and see if pointer-events is set to none anywhere in the computed styles.
	•	C. Disabled Prop or Class:
If disabled prop or a CSS class like opacity-50/cursor-not-allowed is set on the dropdown, it can make it appear dim and ignore clicks.
Check: Look for disabled={true} or disabled classes (e.g. pointer-events-none, bg-gray-200).

2. Event Propagation/Popover Configuration

	•	If you use a Popover or Command component that stops event propagation or bubbles, mouse events may not reach CommandItem.
	•	Sometimes, portals or fixed-position popovers misplace the dropdown, causing it to be visually correct but outside the click area.

3. Parent Container/Portal Problems

	•	If the dropdown is rendered in a React Portal, but the overlay is not, a stacking context mismatch can cause the overlay to block the dropdown.

4. Actual Component Disabled State

	•	You may accidentally pass disabled={true} to the SearchableSelect or CommandItem.
	•	CommandItems must have disabled={false} (default) for click events to work.

How To Debug This FAST

	1.	Open browser dev tools. Inspect the dropdown and CommandItem elements.
	2.	Look for:
	•	Any overlay or sibling div covering the dropdown
	•	CSS styles: pointer-events, opacity, z-index
	•	The disabled attribute on any elements inside the dropdown
	3.	Try temporarily setting pointer-events: auto !important; on the dropdown and see if clicking starts to work.
	4.	Try removing any “dim” or “opacity-50” classes to see if it’s a style/disabled issue.
	5.	Temporarily set the z-index of the dropdown/popover to a very high value (e.g., 9999) to see if it appears and is clickable.

Summary Table

Symptom	Likely Cause	How to Fix/Test
Dropdown dim/greyed out	disabled, opacity-50, overlay	Remove disabled prop, class
Click does nothing	pointer-events: none or overlay	Set pointer-events: auto
Dropdown doesn’t come to front	Popover z-index too low	Set higher z-index
Click targets background, not option	Popover in wrong portal or stacking context	Fix portal/parent stacking

Action Steps

	1.	Inspect for overlays/parent divs that block the dropdown.
	2.	Remove or fix any pointer-events: none.
	3.	Remove accidental disabled props or classes.
	4.	Set proper z-index for Popover/Dropdown.
	5.	If using a portal, ensure dropdown and overlay share a stacking context.
	6.	If dimness is from CSS (e.g. opacity-50), remove or conditionalize these classes so that only the actual “disabled” state applies them.

Example Fixes

<PopoverContent 
  className="z-[9999] w-full p-0"
  align="start"
>
  {/* ... */}
</PopoverContent>

And ensure your CommandItem does not have disabled prop unless you mean it:

<CommandItem
  // ...
  disabled={false} // or remove entirely unless needed
  className={cn(
    "cursor-pointer hover:bg-accent",
    highlightedIdx === i ? "bg-accent" : ""
  )}
  // ...
>

Conclusion:
This is almost certainly a CSS or overlay stacking issue—not a code/handler bug. Fix the CSS/overlay, and your mouse clicks and visual state will work as expected.
If you want to post your component tree or share a screenshot from browser dev tools, I can spot the problem instantly!