PS C:\Users\Maincon\OneDrive\Documents\GitHub\brainliest> npm run dev

> rest-express@1.0.0 dev
> cross-env NODE_ENV=development tsx server/index.ts

‚ùå Error seeding database: TypeError: supabase.from is not a function
    at seedDatabase (C:\Users\Maincon\OneDrive\Documents\GitHub\brainliest\server\src\storage.ts:1626:8)
    at <anonymous> (C:\Users\Maincon\OneDrive\Documents\GitHub\brainliest\server\src\storage.ts:1807:1)
    at ModuleJob.run (node:internal/modules/esm/module_job:329:25)
    at async onImport.tracePromise.__proto__ (node:internal/modules/esm/loader:644:26)
    at async asyncRunEntryPointWithESMLoader (node:internal/modules/run_main:117:5)
‚ö†Ô∏è GEMINI_API_KEY not configured - AI features will be disabled
‚ö†Ô∏è  Using auto-generated JWT secret for development. Set JWT_SECRET for production.
‚ö†Ô∏è  Using auto-generated JWT refresh secret for development. Set JWT_REFRESH_SECRET for production.
‚ö†Ô∏è  Using auto-generated JWT secret for development. Set ADMIN_JWT_SECRET for production.
‚ö†Ô∏è  Using default admin emails for development. Set AUTHORIZED_ADMIN_EMAILS for production.
‚ö†Ô∏è  Development Mode: Auto-generated JWT secret. Set ADMIN_JWT_SECRET for production.
RECAPTCHA_SECRET_KEY not found in environment variables
üåç Geolocation service initialized with 1 providers: IP-API
‚ö†Ô∏è  Generated temporary JWT_SECRET secret for development. Set proper environment variable for production.
‚ö†Ô∏è  Generated temporary JWT_REFRESH_SECRET secret for development. Set proper environment variable for production.
‚ö†Ô∏è  Generated temporary ADMIN_JWT_SECRET secret for development. Set proper environment variable for production.
‚ö†Ô∏è  Generated temporary SESSION_SECRET secret for development. Set proper environment variable for production.
TypeError: supabase.from is not a function
    at seedDatabase (C:\Users\Maincon\OneDrive\Documents\GitHub\brainliest\server\src\storage.ts:1626:8)
    at <anonymous> (C:\Users\Maincon\OneDrive\Documents\GitHub\brainliest\server\src\storage.ts:1807:1)
    at ModuleJob.run (node:internal/modules/esm/module_job:329:25)
    at async onImport.tracePromise.__proto__ (node:internal/modules/esm/loader:644:26)
    at async asyncRunEntryPointWithESMLoader (node:internal/modules/run_main:117:5)
Supabase client initialized: SupabaseClient {
  supabaseUrl: 'http://localhost:54321',
  supabaseKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJuanBqZndkY3lkanJhYWdkbHhiIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MjA5NzM4NywiZXhwIjoyMDY3NjczMzg3fQ.K4LjF9EzxsYoRPCiSnuNKfnbrLXfZ3KElrUVB68GJAg',
  realtimeUrl: URL {
    href: 'ws://localhost:54321/realtime/v1',
    origin: 'ws://localhost:54321',
    protocol: 'ws:',
    username: '',
    password: '',
    host: 'localhost:54321',
    hostname: 'localhost',
    port: '54321',
    pathname: '/realtime/v1',
    search: '',
    searchParams: URLSearchParams {},
    hash: ''
  },
  authUrl: URL {
    href: 'http://localhost:54321/auth/v1',
    origin: 'http://localhost:54321',
    protocol: 'http:',
    username: '',
    password: '',
    host: 'localhost:54321',
    hostname: 'localhost',
    port: '54321',
    pathname: '/auth/v1',
    search: '',
    searchParams: URLSearchParams {},
    hash: ''
  },
  storageUrl: URL {
    href: 'http://localhost:54321/storage/v1',
    origin: 'http://localhost:54321',
    protocol: 'http:',
    username: '',
    password: '',
    host: 'localhost:54321',
    hostname: 'localhost',
    port: '54321',
    pathname: '/storage/v1',
    search: '',
    searchParams: URLSearchParams {},
    hash: ''
  },
  functionsUrl: URL {
    href: 'http://localhost:54321/functions/v1',
    origin: 'http://localhost:54321',
    protocol: 'http:',
    username: '',
    password: '',
    host: 'localhost:54321',
    hostname: 'localhost',
    port: '54321',
    pathname: '/functions/v1',
    search: '',
    searchParams: URLSearchParams {},
    hash: ''
  },
  storageKey: 'sb-localhost-auth-token',
  headers: { 'X-Client-Info': 'brainliest-server' },
  auth: SupabaseAuthClient {
    memoryStorage: {},
    stateChangeEmitters: Map(1) { 'abc26e5e-71ae-457f-b29a-02db66d983e1' => [Object] },
    autoRefreshTicker: null,
    visibilityChangedCallback: null,
    refreshingDeferred: null,
    initializePromise: Promise { <pending> },
    detectSessionInUrl: true,
    hasCustomAuthorizationHeader: false,
    suppressGetSessionWarning: false,
    lockAcquired: true,
    pendingInLock: [ [Promise] ],
    broadcastChannel: null,
    logger: [Function: log],
    instanceID: 1,
    logDebugMessages: false,
    persistSession: false,
    storageKey: 'sb-localhost-auth-token',
    autoRefreshToken: true,
    admin: GoTrueAdminApi {
      url: 'http://localhost:54321/auth/v1',
      headers: [Object],
      fetch: [Function (anonymous)],
      mfa: [Object]
    },
    url: 'http://localhost:54321/auth/v1',
    headers: {
      Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJuanBqZndkY3lkanJhYWdkbHhiIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MjA5NzM4NywiZXhwIjoyMDY3NjczMzg3fQ.K4LjF9EzxsYoRPCiSnuNKfnbrLXfZ3KElrUVB68GJAg',
      apikey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJuanBqZndkY3lkanJhYWdkbHhiIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MjA5NzM4NywiZXhwIjoyMDY3NjczMzg3fQ.K4LjF9EzxsYoRPCiSnuNKfnbrLXfZ3KElrUVB68GJAg',
      'X-Client-Info': 'brainliest-server'
    },
    fetch: [Function (anonymous)],
    lock: [AsyncFunction: lockNoOp],
    flowType: 'implicit',
    jwks: { keys: [] },
    jwks_cached_at: -9007199254740991,
    mfa: {
      verify: [Function: bound _verify] AsyncFunction,
      enroll: [Function: bound _enroll] AsyncFunction,
      unenroll: [Function: bound _unenroll] AsyncFunction,
      challenge: [Function: bound _challenge] AsyncFunction,
      listFactors: [Function: bound _listFactors] AsyncFunction,
      challengeAndVerify: [Function: bound _challengeAndVerify] AsyncFunction,
      getAuthenticatorAssuranceLevel: [Function: bound _getAuthenticatorAssuranceLevel] AsyncFunction
    },
    storage: {
      getItem: [Function: getItem],
      setItem: [Function: setItem],
      removeItem: [Function: removeItem]
    }
  },
  fetch: [Function (anonymous)],
  realtime: RealtimeClient {
    accessTokenValue: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJuanBqZndkY3lkanJhYWdkbHhiIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MjA5NzM4NywiZXhwIjoyMDY3NjczMzg3fQ.K4LjF9EzxsYoRPCiSnuNKfnbrLXfZ3KElrUVB68GJAg',
    apiKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJuanBqZndkY3lkanJhYWdkbHhiIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MjA5NzM4NywiZXhwIjoyMDY3NjczMzg3fQ.K4LjF9EzxsYoRPCiSnuNKfnbrLXfZ3KElrUVB68GJAg',
    channels: [],
    endPoint: 'ws://localhost:54321/realtime/v1/websocket',
    httpEndpoint: 'http://localhost:54321/realtime/v1',
    headers: {},
    params: {
      apikey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJuanBqZndkY3lkanJhYWdkbHhiIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MjA5NzM4NywiZXhwIjoyMDY3NjczMzg3fQ.K4LjF9EzxsYoRPCiSnuNKfnbrLXfZ3KElrUVB68GJAg'
    },
    timeout: 10000,
    heartbeatIntervalMs: 25000,
    heartbeatTimer: undefined,
    pendingHeartbeatRef: null,
    heartbeatCallback: [Function: noop],
    ref: 0,
    logger: [Function: noop],
    conn: null,
    sendBuffer: [],
    serializer: Serializer { HEADER_LENGTH: 1 },
    stateChangeCallbacks: { open: [], close: [], error: [], message: [] },
    accessToken: [Function: bound _getAccessToken],
    _resolveFetch: [Function (anonymous)],
    transport: null,
    reconnectAfterMs: [Function (anonymous)],
    encode: [Function (anonymous)],
    decode: [Function: bound decode],
    reconnectTimer: Timer {
      callback: [AsyncFunction (anonymous)],
      timerCalc: [Function (anonymous)],
      timer: undefined,
      tries: 0
    },
    fetch: [Function (anonymous)]
  },
  rest: PostgrestClient {
    url: 'http://localhost:54321/rest/v1',
    headers: { 'X-Client-Info': 'brainliest-server' },
    schemaName: 'public',
    fetch: [Function (anonymous)]
  }
}
üîí Validating security configuration...
‚ö†Ô∏è  Development mode: Using auto-generated secrets
‚ö†Ô∏è  FOR PRODUCTION: Set JWT_SECRET, JWT_REFRESH_SECRET, ADMIN_JWT_SECRET, SESSION_SECRET
‚ö†Ô∏è  Generated temporary ADMIN_JWT_SECRET secret for development. Set proper environment variable for production.
‚ö†Ô∏è  Generated temporary SESSION_SECRET secret for development. Set proper environment variable for production.
‚ö†Ô∏è  Generated temporary JWT_SECRET secret for development. Set proper environment variable for production.
‚ö†Ô∏è  Generated temporary JWT_REFRESH_SECRET secret for development. Set proper environment variable for production.
‚ùå Supabase connection check failed: TypeError: fetch failed
4:26:36 PM [express] serving on port 5001
Email service initialized with Titan Mail
