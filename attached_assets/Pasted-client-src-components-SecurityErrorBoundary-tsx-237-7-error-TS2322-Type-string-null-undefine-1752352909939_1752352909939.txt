client/src/components/SecurityErrorBoundary.tsx:237:7 - error TS2322: Type 'string | null | undefined' is not assignable to type 'string | undefined'.
  Type 'null' is not assignable to type 'string | undefined'.

237       componentStack: errorInfo.componentStack,
          ~~~~~~~~~~~~~~

  client/src/components/SecurityErrorBoundary.tsx:40:3
    40   componentStack?: string;
         ~~~~~~~~~~~~~~
    The expected type comes from property 'componentStack' which is declared here on type 'ErrorReportData'

client/src/components/ui/searchable-select.tsx:255:23 - error TS2322: Type '(el: HTMLDivElement | null) => HTMLDivElement | null' is not assignable to type 'Ref<HTMLDivElement> | undefined'.
  Type '(el: HTMLDivElement | null) => HTMLDivElement | null' is not assignable to type '(instance: HTMLDivElement | null) => void | (() => VoidOrUndefinedOnly)'.
    Type 'HTMLDivElement | null' is not assignable to type 'void | (() => VoidOrUndefinedOnly)'.
      Type 'null' is not assignable to type 'void | (() => VoidOrUndefinedOnly)'.

255                       ref={(el) => (optionRefs.current[index] = el)}
                          ~~~

  node_modules/@types/react/index.d.ts:292:9
    292         ref?: Ref<T> | undefined;
                ~~~
    The expected type comes from property 'ref' which is declared here on type 'DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>'

client/src/components/ui/searchable-select.tsx:284:23 - error TS2322: Type '(el: HTMLDivElement | null) => HTMLDivElement | null' is not assignable to type 'Ref<HTMLDivElement> | undefined'.
  Type '(el: HTMLDivElement | null) => HTMLDivElement | null' is not assignable to type '(instance: HTMLDivElement | null) => void | (() => VoidOrUndefinedOnly)'.
    Type 'HTMLDivElement | null' is not assignable to type 'void | (() => VoidOrUndefinedOnly)'.
      Type 'null' is not assignable to type 'void | (() => VoidOrUndefinedOnly)'.

284                       ref={(el) => (optionRefs.current[filteredOptions.length] = el)}
                          ~~~

  node_modules/@types/react/index.d.ts:292:9
    292         ref?: Ref<T> | undefined;
                ~~~
    The expected type comes from property 'ref' which is declared here on type 'DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>'

client/src/components/ui/sidebar.tsx:6:29 - error TS2307: Cannot find module '../../hooks/use-mobile' or its corresponding type declarations.

6 import { useIsMobile } from "../../hooks/use-mobile"
                              ~~~~~~~~~~~~~~~~~~~~~~~~

client/src/features/admin/components/admin-simple.tsx:439:42 - error TS2339: Property 'subjectId' does not exist on type '{ id: number; order: number | null; text: string; subjectSlug: string; difficulty: "Beginner" | "Intermediate" | "Advanced" | "Expert"; examSlug: string; options: string[]; correctAnswer: number; correctAnswers: number[] | null; allowMultipleAnswers: boolean | null; explanation: string | null; domain: string | null; }'.

439       count: questionsList.filter(q => q.subjectId === subject.id).length
                                             ~~~~~~~~~

client/src/features/admin/components/admin-simple.tsx:439:64 - error TS2339: Property 'id' does not exist on type '{ color: string | null; name: string; icon: string | null; slug: string; description: string | null; categorySlug: string | null; subcategorySlug: string | null; examCount: number | null; questionCount: number | null; }'.

439       count: questionsList.filter(q => q.subjectId === subject.id).length