You are a world-class QA testing task force with over 30 years of enterprise-grade experience in auditing, hardening, and optimizing React + Vite applications. Treat this as your ultimate charge: perform a complete end-to-end quality, security, and architecture review—then output an exhaustive remediation plan. Preserve every core feature, UI layout, and CSS style. Your AI prompt should include:
	1.	Full Static & Syntax Analysis
	•	Parse every .js/.tsx/.ts file; catch all syntax errors, unused imports, type mismatches, and ESLint/Prettier violations.
	•	Verify React hooks rules (exhaustive-deps, no conditional hooks), component prop types, and correct use of Vite’s alias and plugin configs.
	2.	Architectural & Code-Quality Audit
	•	Map out the component tree, shared utilities, context providers, and custom hooks; evaluate separation of concerns and layering.
	•	Identify code smells (deeply nested callbacks, overly large components, imperative DOM manipulations) and suggest refactors (composition over inheritance, splitting, memoization).
	3.	Routing & Authorization Review
	•	Inspect every route definition in React Router/Vite; verify protected routes enforce authentication and role-based access control.
	•	Simulate unauthorized requests to ensure redirects or 403 responses occur correctly.
	4.	Database & Schema Verification
	•	Compare Drizzle (or ORM) schema files against actual migrations; detect missing indices, foreign-key mismatches, or default-value inconsistencies.
	•	Run automated scripts (e.g., npm run db:validate) to ensure migrations and seeders apply cleanly on a fresh database instance.
	5.	Logic & Runtime Error Detection
	•	Instrument unit and integration tests to cover 100% of business logic branches; catch off-by-one, null/undefined dereferences, promise unhandled rejections, and unawaited async functions.
	•	Use mutation testing or fuzzing to expose hidden logic faults.
	6.	Error-Handling & Resilience
	•	Ensure every API call is wrapped in try/catch with meaningful user feedback; centralize error boundaries at top-level components.
	•	Validate backend Express routes: confirm proper status codes (200/201/400/401/403/404/500), input validation (express-validator/Zod), and sanitization to prevent SQL injection or XSS.
	7.	Automated Scripted Verification
	•	Create CLI scripts to lint, type-check (tsc), run unit tests (jest), integration tests, and end-to-end tests (cypress).
	•	Integrate synthetic health-check scripts that hit /api/health, /api/subjects, and crucial UI flows—flagging any 5xx or JS errors.
	8.	Performance & Bundle Analysis
	•	Run Lighthouse and Vite-bundle-analyzer to identify oversized chunks, unused dependencies, and render-blocking assets.
	•	Propose code-splitting, lazy-loading, and critical CSS extraction to drive TTI under 3s on mobile.
	9.	Security & Vulnerability Scanning
	•	Audit npm audit/Snyk for CVEs; flag any direct or transitive vulnerabilities.
	•	Pen-test common vectors: CSRF tokens, XSS in HTML injections, improper CORS settings, unsafe serialization of JSONB metadata.
	10.	UI/CSS & Accessibility Preservation
	•	Validate that automated fixes do not alter existing CSS modules, Tailwind classes, or styled-component themes.
	•	Run axe-core audits to ensure WCAG 2.1 AA compliance—keyboard nav, ARIA roles, contrast ratios.
	11.	Continuous Integration & Deployment Hardening
	•	Scaffold or lint GitHub Actions workflow to run all checks in parallel, fail fast on code, test, or security issues, and deploy only on green builds.
	•	Add intelligent caching (node_modules, Vite cache) and parallel test runners to speed up pipelines.
	12.	Observability & Monitoring
	•	Insert error-logging (Sentry) and performance metrics (Datadog/Prometheus) hooks in both client and server.
	•	Define health, readiness, and metrics endpoints; mock upstream failures to test circuit breakers.
	13.	Comprehensive Reporting & Remediation Plan
	•	Generate a detailed report: for each issue, include file, line, severity, reproduction steps, and a one-line code suggestion or patch.
	•	Prioritize remediation: “Critical” (security, runtime breaks), “High” (logic errors, build failures), “Medium” (perf, lint), “Low” (style, docs).
	•	Deliver:
	•	Full corrected code snippets,
	•	A structured JSON changelog of every AST transformation,
	•	CI/CD YAML workflows,
	•	Automated test scripts,
	•	And a roadmap for future enhancements (edge functions, schema migrations, feature-flag rollout).