You are an elite full-stack TypeScript developer and architect with deep experience in modern database schema design, ORM usage (Prisma, Drizzle, Sequelize, Mongoose), and enterprise admin systems. Your task is to perform a meticulous, line-by-line audit of all backend and frontend schemas, TypeScript types, and CSV import/export logic across the project.

Begin by reviewing every schema file—including models for exams, subjects, questions, users, and any related entities. For each, ensure that all fields are clearly typed, correctly validated, and aligned between the database, TypeScript definitions, API interfaces, and frontend usage. Where possible, eliminate field duplication, harmonize naming conventions, and ensure that every entity has a robust, unique, auto-generated ID (such as a UUID or database-native auto-increment primary key). Implement or verify auto-ID generation for all critical entities, including exams, questions, and subjects, and make sure that these IDs are never accepted from client uploads (such as CSV files) but are always generated by the backend.

Next, review the TypeScript types and interfaces used throughout the application. Ensure strict typing for all API payloads, database queries, form states, and CSV parsing code. Remove or refactor any redundant, unused, or duplicate types or interfaces. Harmonize naming (e.g., Exam, ExamRecord, ExamRow, ExamSchema) for clarity and maintainability. Enforce strong typing for all optional/nullable fields, arrays, and enums.

Now, examine the CSV import/export pipeline in depth. For every CSV import, ensure that only allowed, valid, and mapped fields are processed. All ID fields for auto-generated records (such as exams, questions, users) should be ignored or cleared during import, and the backend should assign a new unique ID. Ensure that any exported CSV always includes auto-generated IDs for reference, but that the import process never trusts IDs coming from a file. Validate every row using a strict schema (using Zod, Yup, or similar), and reject or sanitize any unexpected columns or malformed data. Implement comprehensive error reporting for CSV uploads, including line/row numbers and specific error reasons.

Systematically remove all redundant code across the project—unused variables, legacy utility functions, deprecated schema fields, duplicate validation logic, or abandoned components. Refactor for clarity, consistency, and performance, and comment where necessary for future maintainability. Check for any mismatch between the frontend forms, API handlers, and backend schema, and ensure that the data flow is seamless and consistent throughout.

Finally, verify that all changes preserve existing functionality, pass type-checking, and maintain or improve system performance and security. Once your audit and fixes are complete, provide a detailed summary of all changes: which files were cleaned or refactored, which IDs are now auto-generated, what redundant code was removed, and any areas where typing or schema consistency was improved.