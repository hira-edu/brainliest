Our current authentication flow auto-signs in users when the app loads, which bypasses explicit organizational-level authorization. We need to restore a proper, secure authentication and authorization system where:

Users must explicitly authenticate (manual sign-in) before access.

Organizational-level authorization is enforced for admin routes.

No automatic login on app load.

Instructions:

Audit Authentication Components

Identify all components/services responsible for user authentication (e.g., AuthContext, any hooks, API utilities).

Confirm any logic that triggers automatic login or “silent” authentication and remove/disable it.

Enforce Explicit User Authentication

Modify the authentication flow so users are only signed in via an explicit user action (e.g., login form, SSO button).

On app load, users should be treated as unauthenticated unless a valid session/token already exists from a prior explicit login.

Restore Organizational-Level Authorization

Implement (or restore) a robust role-based authorization system.

For admin and organization-specific routes/components:

Use a ProtectedAdminRoute (or similar) component/HOC that checks the authenticated user’s roles/permissions before granting access.

Redirect or block access for unauthorized users with a clear error or redirect to login.

Security Best Practices

Ensure role/permission checks are enforced both client-side and in backend APIs.

Avoid relying on just client-side checks—always validate user roles server-side before processing sensitive/admin actions.

Testing & QA

Confirm that upon app load, no user is authenticated until they sign in manually.

Confirm that admin/organizational routes cannot be accessed unless the user is authenticated and has the correct organization role.

Test multiple scenarios: unauthenticated, authenticated non-admin, authenticated admin, expired session.

Goal:
Restore an explicit, secure, and robust organizational-level authentication and authorization flow. Ensure there are no silent or automatic sign-ins, and that all protected/admin functionality is strictly guarded by explicit, verifiable user authentication and organization role/permission checks.