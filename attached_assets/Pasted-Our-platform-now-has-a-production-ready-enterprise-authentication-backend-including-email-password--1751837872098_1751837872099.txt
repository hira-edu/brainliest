Our platform now has a production-ready enterprise authentication backend, including email/password and Google OAuth, JWT/refresh token management, email verification, and advanced security. The database, backend, and endpoints are all running and tested, but authentication (login/sign up) is not working on the frontend. We need to diagnose the integration issue and provide robust, user-friendly sign-in, sign-up, and password reset forms/options.

Requirements:

Diagnose Integration Issues:

Audit API endpoint URLs on the frontend to ensure they point to the correct backend (port 5000).

Check CORS settings—are frontend and backend allowed to talk to each other?

Verify that JWT tokens are stored and transmitted securely (usually in HTTP-only cookies or secure storage).

Check the browser console and network tab for error codes (e.g., 401 Unauthorized, 403 Forbidden, 404 Not Found, CORS errors).

Ensure that Google OAuth credentials and redirect URIs match what’s registered in Google Cloud Console.

Confirm that signup/signin forms POST to the correct endpoints and with the right payload format (JSON, etc.).

Confirm that email verification and password reset links are generated with correct frontend URLs.

Review server logs for authentication errors.

Generate Complete Sign In / Sign Up / Password Reset UIs:

User-friendly React forms for Sign In, Sign Up, and Password Reset.

Support for both email/password and Google OAuth sign-in.

Show error messages for invalid credentials, unverified email, locked accounts, etc.

Display option to resend email verification after sign-up or failed login.

Include “Forgot password?” with email link to request a password reset.

Password reset page should support resetting via emailed token.

Upon successful login, show “Welcome” and fetch user profile.

Support logout and JWT token refresh in the UI.

Security and UX:

Don’t expose sensitive details in error messages (e.g., “incorrect email or password” instead of “user not found”).

Don’t allow login until email is verified.

Lock account and display message after repeated failed logins.

Responsive and accessible forms, styled to match the platform.

Testing and Troubleshooting:

Test API with tools like Postman or Insomnia to ensure endpoints work outside the frontend.

Provide a step-by-step checklist to debug common auth issues (API URL mismatch, bad tokens, etc.).

Your Task:
Diagnose why authentication is not working on the frontend, suggest precise fixes (based on likely CORS, API URL, JWT, or redirect URI issues), and provide production-grade code for user Sign In, Sign Up, and Password Reset React forms, including Google OAuth and email verification support.