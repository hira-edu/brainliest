Using sanitizeString(req.query.examSlug as string) is a good first step—it’ll strip or escape any dangerous characters from that raw URL parameter. But for a “world-class” implementation you want to go further:
	1.	Avoid Blind Casting

// Bad: you’re assuming req.query.examSlug always exists and is a string
const examSlug = sanitizeString(req.query.examSlug as string);

If req.query.examSlug is missing or an array (e.g. ?examSlug[]=foo), you’ll get runtime errors or unexpected behavior. Instead, explicitly check or parse:

if (!req.query.examSlug || Array.isArray(req.query.examSlug)) {
  throw new BadRequestError('Missing or invalid examSlug');
}
const rawSlug = req.query.examSlug;


	2.	Schema-First Validation with Zod
Rather than hand-roll both cast and sanitize, use a schema:

import { z } from 'zod';

const querySchema = z.object({
  examSlug: z.string().regex(/^[a-z0-9-]+$/, 'Exam slug must be lowercase letters, numbers, or hyphens'),
});

const { examSlug } = querySchema.parse(req.query);

Now examSlug is guaranteed to match your slug pattern. You can still call sanitizeString if you want to strip whitespace or other stray chars, but the regex gives you strict validation.

	3.	Use Parameterized Queries
When you later use examSlug in a database query, always pass it as a parameter—never string-concatenate it into SQL. With Drizzle:

const exam = await db
  .select()
  .from(exams)
  .where(exams.slug.eq(examSlug))
  .get();

Drizzle will automatically handle escaping for you.

	4.	Layered Defense
	•	Client-side: You can also validate the slug pattern in your React code before you even build the URL.
	•	Server-side sanitize: Keep sanitizeString for trimming, normalizing Unicode, or removing unexpected whitespace.
	•	Strict validation: Let the schema reject anything that doesn’t exactly match your allowed characters.
	5.	Clear Errors
If the slug is invalid, return a 400 with a message:

try {
  const { examSlug } = querySchema.parse(req.query);
  // …
} catch (e) {
  return res.status(400).json({ error: 'Invalid examSlug format' });
}



⸻

Putting it all together

import { z } from 'zod';
import { sanitizeString } from './security/input-sanitizer';

const querySchema = z.object({
  examSlug: z.string().regex(/^[a-z0-9-]+$/),
});

app.get('/api/exams', (req, res) => {
  let examSlug: string;
  try {
    ({ examSlug } = querySchema.parse(req.query));
  } catch {
    return res.status(400).json({ error: 'Invalid examSlug format' });
  }

  // Optional: normalize or trim via sanitizeString
  examSlug = sanitizeString(examSlug);

  // Safe parameterized query via Drizzle
  const exam = await db
    .select()
    .from(exams)
    .where(exams.slug.eq(examSlug))
    .get();

  return res.json(exam);
});

By combining explicit existence checks, schema‐driven validation, sanitization, and parameterized queries, you ensure that examSlug can’t be used for XSS, SQL injection, or other surprises—meeting a world-class standard.