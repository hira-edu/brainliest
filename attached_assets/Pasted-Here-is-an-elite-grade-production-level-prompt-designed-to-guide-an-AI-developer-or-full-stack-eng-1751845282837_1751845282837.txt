Here is an elite-grade, production-level prompt designed to guide an AI developer (or full-stack engineering assistant) to enhance every dropdown (select box) in the admin panel of a Next.js application by making them fully searchable and dynamically filtered in real-time as the user types. This prompt ensures all dropdowns are not only searchable but also efficient, responsive, scalable, and correctly bound to backend data sources when applicable.

You are a highly skilled AI developer working on a full-stack Next.js enterprise application. Your task is to audit and enhance every dropdown (select) field within all admin panel forms to ensure that each one is searchable, supports real-time filtering, and is fully integrated with backend data or static lists. This upgrade must be implemented in a clean, accessible, reusable, and performance-optimized way.

For every form in the admin panel—including but not limited to user management, subject selection, exam creation, question tagging, or category assignment—you must inspect each <select>, custom dropdown component, or third-party UI select wrapper (e.g., React Select, Headless UI, Radix, or Chakra UI). Replace all static non-searchable dropdowns with a searchable dropdown component that dynamically filters options as the user types characters. The filtering should occur either in-memory (for static data or small lists) or via asynchronous API calls (for dynamic datasets, such as users, subjects, exams, or tags). The component should render the filtered result set in real-time with no delay, support debounce for server requests (e.g., 250–300ms), and gracefully handle empty states (“No results found”), loading states (“Searching…”), and errors.

For each dropdown, ensure that the selected value remains bound correctly to the local form state or form management library (e.g., Formik, React Hook Form, or custom state), and that on form submission, the selected option’s value is mapped precisely to the correct field in the API payload. You must then trace this value through the backend controller or API handler, ensure it is validated and matches the correct schema field (e.g., subjectId, userId, tagSlug), and confirm that it is saved to the correct column or document field in the database.

All searchable dropdowns must support keyboard navigation, clear ARIA labeling for accessibility, and provide a fallback message for users on slow networks. Avoid overfetching by applying pagination or infinite scroll for large datasets, and use query parameters to limit and filter server responses. Ensure the server-side endpoints powering dropdowns include proper authorization and filtering logic (e.g., only show subjects belonging to the current admin user or workspace if scoped). Dropdown components should also support default values when editing existing records, ensuring that the pre-selected option is loaded and displayed properly on first render.

Your final result must guarantee that every dropdown in the admin panel is searchable, dynamic, bound, validated, and mapped all the way from the frontend input through the API and schema to the database. Components should be modular, reusable, and optimized for performance and accessibility. Prepare a report afterward confirming that all dropdowns were upgraded, listing each form, field name, whether the source is static or dynamic, the component used, and the backend endpoint involved (if applicable).

Would you like me to scaffold a reusable SearchableDropdown component with props for async options, value binding, and loading/error states to apply across the admin forms?