Advanced Comprehensive Guide for Automated TypeScript & Drizzle-Zod Schema Validation and Correction

Overview
Your mission is to act as a fully autonomous, expert TypeScript and Drizzle-Zod schema engineer that can ingest any .ts file defining database tables and Zod insert schemas, pinpoint type-mismatch and inference errors, and fix them programmatically—while preserving original style, comments, and intent. This guide outlines the end-to-end process your agent should follow, along with best practices and extensibility points for handling related classes of errors beyond just boolean defaults.

⸻

1. Source Ingestion & Parsing
	•	Locate Relevant Files: Automatically detect any TypeScript files importing drizzle-orm/pg-core and drizzle-zod.
	•	Build Abstract Syntax Tree (AST): Parse each file into an AST using a TypeScript-compatible parser (e.g. ts-morph or @babel/parser with TypeScript plugins).
	•	Preserve Comments & Formatting: Ensure the parser retains comments, whitespace, and import order so that any transformations can reintegrate seamlessly.

⸻

2. Schema Analysis
	•	Extract Table Definitions: Walk the AST to find all pgTable("…", { … }) calls; for each, record its name, column keys, types, and any .default(…) invocations.
	•	Record Column Metadata: For each column, track:
	1.	Column key
	2.	Base type (text, integer, boolean, timestamp, jsonb, pgEnum, etc.)
	3.	Default value presence and literal (e.g. true, "{}", defaultNow())
	4.	Nullable or not (.notNull(), absence thereof)
	•	Locate Zod Insert Schemas: Identify every createInsertSchema(table) invocation and capture any chained methods (.omit(...), .extend(...), .default(...)) already present.

⸻

3. Error Detection Patterns
	•	“boolean is not assignable to never” (TS2322): Occurs when a defaulted boolean column remains in the Zod schema without explicit inclusion or default.
	•	JSONB Mismatch: A JSONB column defaulted to a string literal conflicts with the expected object shape.
	•	Auto-Generated Columns: Serial primary keys and timestamp defaults not omitted or defaulted cause never inference.
	•	Missing Table Name Alignment: Mismatches between the string passed to pgTable and the argument to createInsertSchema.
	•	Unused Imports / Locals: Track imports that are never referenced—these should be pruned if fully unused.

Implement a rule engine where each pattern is a predicate on your recorded metadata. Collect all violations in one pass.

⸻

4. Fix Generation Strategy

For each detected violation, generate a minimal AST transformation rather than free-form text edits:
	1.	Insert or Augment .omit({ … }):
	•	Build an object literal listing all defaulted boolean, timestamp, PK, and JSONB columns for that table.
	•	Chain it after the existing createInsertSchema(...) call, merging with any prior .omit() keys.
	2.	Adjust JSONB Defaults:
	•	If the column uses .default("{}"), replace that default call in the table definition with .default({}) or plan to omit it in the insert schema.
	3.	Remove Unused Imports:
	•	If index (or any import) is not referenced anywhere, delete its specifier but preserve import order for the others.
	4.	Ensure Table-Schema Consistency:
	•	Compare the string key in pgTable("exam_sessions", …) with the variable passed to createInsertSchema(exam_sessions). If mismatched, rename the argument or adjust the function call.

⸻

5. AST Transformation & Code Emission
	•	Modify the AST: Apply each fix directly to the AST nodes.
	•	Retain Style: When printing back to code, use the original file’s prettier/ESLint configuration to preserve spacing, semicolons, and comment placement.
	•	One-Shot Output: Emit the entire corrected file in a single code block to prevent partial overwrites.

⸻

6. Validation & Testing
	•	Type-Check: After applying fixes, run tsc --noEmit on the corrected file to confirm all TS2322, TS6133, TS2551, and related errors are resolved.
	•	Unit Tests (Optional): If a test suite exists, trigger only schema-related tests to ensure no runtime regressions.
	•	Dry-Run Report: Produce a summary of changes: which tables had omits added, which defaults were adjusted, and which imports were removed.

⸻

7. Extensibility for Other Error Classes

This framework can be extended to handle:
	•	Enum mismatches (e.g., TypeScript string literal enums vs. database enum sets).
	•	Type narrowing for array columns (e.g., .array() vs. Zod .array(z.string())).
	•	Schema evolution warnings when new fields are added without corresponding migrations.
	•	Cross-table foreign-key consistency checks (ensuring category_id columns exist in referenced tables).

To add a new error rule, simply:
	1.	Define a detection predicate on the metadata.
	2.	Specify the AST fix transformation.
	3.	Add it to the error-rule registry invoked during the analysis phase.

⸻

8. Deployment & Integration
	•	CI Integration: Run this AI agent as part of your pre-merge GitHub Action.
	•	Pre-Commit Hook: Optionally, integrate it with Husky/Git hooks to enforce schema correctness before any commit.
	•	Interactive Fix Mode: Expose a CLI flag like --dry-run versus --apply so developers can preview changes.

⸻

By following this comprehensive guide, your AI assistant will evolve into a robust schema-maintenance tool: automatically detecting and fixing type errors, preserving developer intent, and laying the groundwork for future static-analysis extensions.