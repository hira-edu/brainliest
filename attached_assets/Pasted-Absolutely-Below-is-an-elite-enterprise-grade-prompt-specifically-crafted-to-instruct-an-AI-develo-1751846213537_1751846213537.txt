Absolutely. Below is an elite, enterprise-grade prompt specifically crafted to instruct an AI developer or assistant to:
	‚Ä¢	Line-by-line audit and match all form inputs across every tab/section of the admin panel
	‚Ä¢	Integrate these inputs into an editable CSV template that matches the form structure and database schema
	‚Ä¢	Ensure that CSV import/export supports full CRUD (Create, Read, Update, Delete) functionality
	‚Ä¢	Guarantee data mapping consistency across the frontend, CSV, backend schema, and database
	‚Ä¢	Handle form-driven and CSV-driven workflows interchangeably and securely

üîç ELITE PROMPT: Admin Panel ‚Üí CSV Template Matching with Full CRUD Integration

You are an elite AI engineer embedded into a secure enterprise-grade full-stack Next.js system. Your responsibility is to deeply audit the admin panel by accessing every tab, section, and form view and performing a line-by-line extraction and validation of each form input field. For every input field found in each admin form‚Äîwhether for users, subjects, exams, questions, categories, or tags‚Äîyou must verify its name, type, required status, options (if dropdown), and validation rules. Then, using this field data, build and maintain a comprehensive and synchronized CSV template that matches the exact form structure and database schema.

This CSV template must serve as a parallel interface to the manual form. Any admin user who prefers bulk editing must be able to download the CSV template, make updates (add new, edit existing, delete rows), and upload it back to the system. Your job is to ensure this CSV-driven interaction maps exactly to the corresponding form-driven CRUD workflows.

For each form:
	1.	Start by crawling every tab/page in the admin panel.
	2.	Identify all input fields‚Äîtext, number, select, checkbox, radio, textarea, file upload‚Äîand extract their properties.
	3.	Confirm that each form field maps to an actual backend API field and database schema column (via Drizzle, Prisma, Mongoose, etc.).
	4.	Create a unified CSV schema that reflects:
	‚Ä¢	Field labels (for user clarity)
	‚Ä¢	Internal field keys (matching backend schema)
	‚Ä¢	Expected data types and validation requirements
	‚Ä¢	Predefined option values (for select or enums)
	‚Ä¢	Flags for required or optional fields

Once the CSV schema is generated, you must enable three key operations through this CSV interface:
	‚Ä¢	Add New Rows: Detect new entries in the uploaded CSV (missing ID or primary key), validate, and insert them.
	‚Ä¢	Edit Existing Rows: Match by primary key (id, slug, email, etc.), compare field values, and update only if changes are detected.
	‚Ä¢	Delete Rows: Support deletion via a special flag in the CSV (e.g., delete=true) or a dedicated ‚ÄúAction‚Äù column.

Ensure the import handler reads each row, validates all data (type, presence, options), and sanitizes any content (especially text or HTML). Reject malformed rows gracefully, and report success/failure on a per-row basis. Wrap all CSV imports in atomic transactions or batch logic, and roll back partial writes on failure. Also provide informative error messages‚Äîe.g., ‚ÄúRow 5: Missing required field ‚ÄòsubjectId‚Äô‚Äù, or ‚ÄúRow 8: Invalid option selected for difficulty‚Äù.

Your implementation must also provide an export function for every admin form or data model, allowing admins to download current data in CSV format. This exported file must include:
	‚Ä¢	All form fields as columns
	‚Ä¢	Proper formatting (dates, arrays, dropdown values, etc.)
	‚Ä¢	Row-level metadata (e.g., createdAt, updatedAt, ID)

For forms that currently rely on manual CRUD (via modals or inline forms), the CSV upload should serve as a mirror of that functionality, giving admins the option to bulk-edit outside the UI and re-upload changes. The system should always remain in sync, whether the data was changed via form or CSV.

Additionally, provide a CSV UI template preview generator (e.g., downloadable sample CSVs with comments or headers like # Required fields or # Choose from: easy, medium, hard) to improve admin usability. All CSV uploaders must support:
	‚Ä¢	Searchable dropdown mapping (in select fields)
	‚Ä¢	ID-to-name mapping (e.g., subjectId ‚Üí Subject Name for readability)
	‚Ä¢	Re-import safety: Do not create duplicates if rows are unchanged

Finally, this entire process must be secure and auditable. Log every CSV upload or form submission that leads to a database change. Track admin user, timestamp, affected rows, and actions (create, update, delete).

üîö Summary of What You Must Deliver:

	‚Ä¢	A full admin form crawler that extracts all fields from each tab/section
	‚Ä¢	A master CSV schema per entity (user, subject, exam, question, etc.)
	‚Ä¢	CRUD support via CSV: add, update, delete
	‚Ä¢	Input field ‚Üî CSV column ‚Üî API field ‚Üî DB schema alignment
	‚Ä¢	Real-time searchable dropdown integration where relevant (via options or IDs)
	‚Ä¢	CSV sanitization, validation, rollback, error feedback
	‚Ä¢	Admin CSV export/import interface with example templates
	‚Ä¢	Audit logging for all data changes, whether via form or CSV

Once ready, begin with Subject Management, extract all inputs, generate the CSV schema, and validate against the backend. Then continue tab-by-tab.

Would you like me to scaffold the CSV generation logic and import controller for one entity (e.g., questions) to start?